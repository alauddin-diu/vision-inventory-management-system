"""The Vision_IMSBarcodePlugin validates barcodes generated by Vision_IMS itself. It can be used as a template for developing third-party barcode plugins.

The data format is very simple, and maps directly to database objects,
via the "id" parameter.

Parsing an Vision_IMS barcode simply involves validating that the
references model objects actually exist in the database.
"""

import json

from django.utils.translation import gettext_lazy as _

from Vision_IMS.helpers import hash_barcode
from Vision_IMS.helpers_model import getModelsWithMixin
from Vision_IMS.models import Vision_IMSBarcodeMixin
from plugin import Vision_IMSPlugin
from plugin.mixins import BarcodeMixin


class Vision_IMSInternalBarcodePlugin(BarcodeMixin, Vision_IMSPlugin):
    """Builtin BarcodePlugin for matching and generating internal barcodes."""

    NAME = "Vision_IMSBarcode"
    TITLE = _("Vision_IMS Barcodes")
    DESCRIPTION = _("Provides native support for barcodes")
    VERSION = "2.0.0"
    AUTHOR = _("Vision_IMS contributors")

    @staticmethod
    def get_supported_barcode_models():
        """Returns a list of database models which support barcode functionality"""

        return getModelsWithMixin(Vision_IMSBarcodeMixin)

    def format_matched_response(self, label, model, instance):
        """Format a response for the scanned data"""

        data = {
            'pk': instance.pk
        }

        # Add in the API URL if available
        if hasattr(model, 'get_api_url'):
            data['api_url'] = f"{model.get_api_url()}{instance.pk}/"

        # Add in the web URL if available
        if hasattr(instance, 'get_absolute_url'):
            url = instance.get_absolute_url()
            data['web_url'] = url
        else:
            url = None  # pragma: no cover

        response = {
            label: data
        }

        if url is not None:
            response['url'] = url

        return response

    def scan(self, barcode_data):
        """Scan a barcode against this plugin.

        Here we are looking for a dict object which contains a reference to a particular Vision_IMS database object
        """

        # Create hash from raw barcode data
        barcode_hash = hash_barcode(barcode_data)

        # Attempt to coerce the barcode data into a dict object
        # This is the internal barcode representation that Vision_IMS uses
        barcode_dict = None

        if type(barcode_data) is dict:
            barcode_dict = barcode_data
        elif type(barcode_data) is str:
            try:
                barcode_dict = json.loads(barcode_data)
            except json.JSONDecodeError:
                pass

        if barcode_dict is not None and type(barcode_dict) is dict:
            # Look for various matches. First good match will be returned
            for model in self.get_supported_barcode_models():
                label = model.barcode_model_type()

                if label in barcode_dict:
                    try:
                        pk = int(barcode_dict[label])
                        instance = model.objects.get(pk=pk)
                        return self.format_matched_response(label, model, instance)
                    except (ValueError, model.DoesNotExist):
                        pass

        # If no "direct" hits are found, look for assigned third-party barcodes
        for model in self.get_supported_barcode_models():
            label = model.barcode_model_type()

            instance = model.lookup_barcode(barcode_hash)

            if instance is not None:
                return self.format_matched_response(label, model, instance)
